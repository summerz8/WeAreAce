/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package islandfurniturepos;

import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import sessionbean.km.ComboEntity;
import sessionbean.km.ComboItemEntity;
import sessionbean.km.DishEntity;
import sessionbean.km.DishItemEntity;
import sessionbean.km.KitchenEntity;
import sessionbean.km.KitchenOrderEntity;

/**
 *
 * @author hangsun
 */
public class NewOrder extends javax.swing.JFrame {

    private String POSid = null;
    private String partnerPoleDisplayCOMPort = "COM5";
    private OutputStream partnerPoleDisplayOutputStream;
    private SerialPort serialPort;
    private String storeStaffId = null;
    private Long memberId = null;
    private Long orderId = null;
    private Long kitchenId = null;
    private KitchenOrderEntity order = null;
    private List<ComboEntity> comboList = new ArrayList();
    private List<DishEntity> dishList = new ArrayList();
    private List<ComboItemEntity> selectedCombo = new ArrayList();
    private List<DishItemEntity> selectedDish = new ArrayList();

    /**
     * Creates new form NewTransaction
     */
    public NewOrder() {
        initComponents();
    }

    public NewOrder(String POSid, String staffId, Long memberId) {

        this();

        this.POSid = POSid;
        this.storeStaffId = staffId;
        this.memberId = memberId;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanelTitle = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jPanelInput = new javax.swing.JPanel();
        jButtonAddCombo = new javax.swing.JButton();
        jButtonAddDish = new javax.swing.JButton();
        javax.swing.JButton jButtonDeleteCombo = new javax.swing.JButton();
        javax.swing.JButton jButtonDeleteDish = new javax.swing.JButton();
        jPanelActionButton = new javax.swing.JPanel();
        jButtonCancel = new javax.swing.JButton();
        jButtonCheckOut = new javax.swing.JButton();
        jLabelLogo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCombo = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDish = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableSelectedCombo = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableSelectedDish = new javax.swing.JTable();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanelTitle.setBackground(new java.awt.Color(255, 51, 51));
        jPanelTitle.setPreferredSize(new java.awt.Dimension(705, 119));

        jLabelTitle.setFont(new java.awt.Font("New Peninim MT", 3, 48)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle.setText("                                 Island Furniture POS");
        jLabelTitle.setToolTipText("");
        jLabelTitle.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanelTitleLayout = new javax.swing.GroupLayout(jPanelTitle);
        jPanelTitle.setLayout(jPanelTitleLayout);
        jPanelTitleLayout.setHorizontalGroup(
            jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1190, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelTitleLayout.setVerticalGroup(
            jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelInput.setBackground(new java.awt.Color(255, 255, 255));

        jButtonAddCombo.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAddCombo.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonAddCombo.setText("Add Combo->");
        jButtonAddCombo.setToolTipText("");
        jButtonAddCombo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAddCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddComboActionPerformed(evt);
            }
        });

        jButtonAddDish.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAddDish.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonAddDish.setText("Add Dish->");
        jButtonAddDish.setToolTipText("");
        jButtonAddDish.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAddDish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddDishActionPerformed(evt);
            }
        });

        jButtonDeleteCombo.setBackground(new java.awt.Color(255, 255, 255));
        jButtonDeleteCombo.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonDeleteCombo.setText("Delete Combo->");
        jButtonDeleteCombo.setToolTipText("");
        jButtonDeleteCombo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteComboActionPerformed(evt);
            }
        });

        jButtonDeleteDish.setBackground(new java.awt.Color(255, 255, 255));
        jButtonDeleteDish.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonDeleteDish.setText("Delete Dish->");
        jButtonDeleteDish.setToolTipText("");
        jButtonDeleteDish.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteDish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteDishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelInputLayout = new javax.swing.GroupLayout(jPanelInput);
        jPanelInput.setLayout(jPanelInputLayout);
        jPanelInputLayout.setHorizontalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAddCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAddDish, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButtonDeleteCombo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDeleteDish, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelInputLayout.setVerticalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jButtonAddCombo)
                .addGap(111, 111, 111)
                .addComponent(jButtonDeleteCombo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 147, Short.MAX_VALUE)
                .addComponent(jButtonAddDish, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addComponent(jButtonDeleteDish)
                .addGap(89, 89, 89))
        );

        jPanelActionButton.setBackground(new java.awt.Color(255, 255, 255));

        jButtonCancel.setBackground(new java.awt.Color(255, 255, 255));
        jButtonCancel.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonCheckOut.setBackground(new java.awt.Color(255, 255, 255));
        jButtonCheckOut.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonCheckOut.setText("Check Out");
        jButtonCheckOut.setToolTipText("");
        jButtonCheckOut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckOutActionPerformed(evt);
            }
        });

        jLabelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/singapore-logo0.1.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanelActionButtonLayout = new javax.swing.GroupLayout(jPanelActionButton);
        jPanelActionButton.setLayout(jPanelActionButtonLayout);
        jPanelActionButtonLayout.setHorizontalGroup(
            jPanelActionButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelActionButtonLayout.createSequentialGroup()
                .addGap(0, 17, Short.MAX_VALUE)
                .addGroup(jPanelActionButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelLogo)
                    .addGroup(jPanelActionButtonLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanelActionButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        jPanelActionButtonLayout.setVerticalGroup(
            jPanelActionButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelActionButtonLayout.createSequentialGroup()
                .addComponent(jLabelLogo)
                .addGap(61, 61, 61)
                .addComponent(jButtonCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111)
                .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTableCombo.setFont(new java.awt.Font("Times", 3, 10)); // NOI18N
        jTableCombo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Combo ID", "Combo Name", "Combo Price"
            }
        ));
        jScrollPane1.setViewportView(jTableCombo);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTableDish.setFont(new java.awt.Font("Times", 3, 8)); // NOI18N
        jTableDish.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Dish ID", "Dish Name", "Dish Price"
            }
        ));
        jScrollPane2.setViewportView(jTableDish);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jTableSelectedCombo.setFont(new java.awt.Font("Times", 3, 10)); // NOI18N
        jTableSelectedCombo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Combo ID", "Combo Name", "Combo Price", "Quantity", "Total Price"
            }
        ));
        jScrollPane3.setViewportView(jTableSelectedCombo);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jTableSelectedDish.setFont(new java.awt.Font("Times", 3, 10)); // NOI18N
        jTableSelectedDish.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Dish ID", "Dish Name", "Dish Price", "Quantity", "Total Price"
            }
        ));
        jScrollPane4.setViewportView(jTableSelectedDish);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1222, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelActionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelActionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddComboActionPerformed
        // TODO add your handling code here:

        int selectedRow = jTableCombo.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select one combo!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            ComboEntity combo = comboList.get(selectedRow);
            orderDisplay(combo.getName(),combo.getPrice());
            addComboItem(orderId, combo.getId(), 1);
            selectedCombo = getComboItemByOrderId(orderId);
            loadTableSelectedCombo();
        }


    }//GEN-LAST:event_jButtonAddComboActionPerformed

    private void jButtonCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckOutActionPerformed
        // TODO add your handling code here:

        if (selectedCombo.isEmpty() && selectedDish.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Order list is empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            closePort();
            this.setVisible(false);
            this.dispose();
            
            CheckOut checkOut = new CheckOut(POSid, storeStaffId, orderId);
            checkOut.setLocationRelativeTo(null);
            checkOut.setVisible(true);
            checkOut.setExtendedState(JFrame.NORMAL);
        }

    }//GEN-LAST:event_jButtonCheckOutActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
       

        KitchenEntity kitchen = findKitchenByStoreStaffId(storeStaffId);
        kitchenId = kitchen.getId();
        comboList = getComboByKitchenId(kitchenId);
        dishList = getDishByKitchenId(kitchenId);
        loadTableCombo();
        loadTableDish();      
        order = createOrder(kitchenId, memberId, storeStaffId, POSid);
        orderId = order.getId();

        initPartnerPoleDisplay();
        poleDisplay();
    }//GEN-LAST:event_formWindowOpened

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        cancelOrder(orderId);
        closePort();
        this.setVisible(false);
        this.dispose();
       
        MainMenu mainMenu = new MainMenu(POSid, storeStaffId);
        mainMenu.setLocationRelativeTo(null);
        mainMenu.setVisible(true);
        mainMenu.setExtendedState(JFrame.NORMAL);

    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        if (serialPort != null) {
            try {
                byte[] clear = {0x0C};
                partnerPoleDisplayOutputStream.write(clear);
                partnerPoleDisplayOutputStream.close();
                serialPort.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_formWindowClosed

    private void jButtonDeleteComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteComboActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableSelectedCombo.getSelectionModel().getLeadSelectionIndex();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select one combo ->", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            System.err.println("Row:" + selectedRow);
            ComboItemEntity comboItem = selectedCombo.get(selectedRow);
            deleteComboItem(orderId, comboItem.getId());
            selectedCombo = getComboItemByOrderId(orderId);
            loadTableSelectedCombo();
        }
    }//GEN-LAST:event_jButtonDeleteComboActionPerformed

    private void jButtonAddDishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddDishActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableDish.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select one dish!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            DishEntity dish = dishList.get(selectedRow);
            orderDisplay(dish.getName(),dish.getPrice());
            addDishItem(orderId, dish.getId(), 1);
            selectedDish = getDishItemByOrderId(orderId);
            loadTableSelectedDish();
        }
    }//GEN-LAST:event_jButtonAddDishActionPerformed

    private void jButtonDeleteDishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteDishActionPerformed
        // TODO add your handling code here:

        int selectedRow = jTableSelectedDish.getSelectionModel().getLeadSelectionIndex();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select one Dish ->", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            System.err.println("Row:" + selectedRow);
            DishItemEntity dishItem = selectedDish.get(selectedRow);
            deleteDishItem(orderId, dishItem.getId());
            selectedDish = getDishItemByOrderId(orderId);
            loadTableSelectedDish();
        }
    }//GEN-LAST:event_jButtonDeleteDishActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddCombo;
    private javax.swing.JButton jButtonAddDish;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCheckOut;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelActionButton;
    private javax.swing.JPanel jPanelInput;
    private javax.swing.JPanel jPanelTitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableCombo;
    private javax.swing.JTable jTableDish;
    private javax.swing.JTable jTableSelectedCombo;
    private javax.swing.JTable jTableSelectedDish;
    // End of variables declaration//GEN-END:variables
    
    private void closePort() {
        System.err.println("Window closed");
        if (serialPort != null) {
            try {
                byte[] clear = {0x0C};
                partnerPoleDisplayOutputStream.write(clear);
                partnerPoleDisplayOutputStream.close();
                serialPort.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }
    private void loadTableCombo() {
        try {

            if (comboList != null && comboList.size() > 0) {
                Object[][] data = new Object[comboList.size()][3];

                for (int i = 0; i < comboList.size(); i++) {
                    ComboEntity combo = comboList.get(i);
                    data[i][0] = combo.getId();
                    data[i][1] = combo.getName();
                    data[i][2] = combo.getPrice();
                }

                Object[] columnNames = new Object[3];

                columnNames[0] = "Combo ID";
                columnNames[1] = "Combo Name";
                columnNames[2] = "Combo Price";

                TableModel tableModel = new DefaultTableModel(data, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return true;
                    }

                };

                jTableCombo.setModel(tableModel);
                jTableCombo.getSelectionModel().addListSelectionListener(new RowListener());
            } else {
                Object[] columnNames = new Object[3];

                columnNames[0] = "Combo ID";
                columnNames[1] = "Combo Name";
                columnNames[2] = "Combo Price";
                Object[][] data = new Object[1][3];

                TableModel tableModel = new DefaultTableModel(data, columnNames);
                jTableCombo.setModel(tableModel);
                jTableCombo.getSelectionModel().addListSelectionListener(new RowListener());
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unknown error has occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadTableSelectedCombo() {
        try {

            if (selectedCombo != null && selectedCombo.size() > 0) {
                Object[][] data = new Object[selectedCombo.size()][5];

                for (int i = 0; i < selectedCombo.size(); i++) {
                    ComboItemEntity combo = selectedCombo.get(i);
                    data[i][0] = combo.getId();
                    data[i][1] = combo.getCombo().getName();
                    data[i][2] = combo.getCombo().getPrice();
                    data[i][3] = combo.getQuantity();
                    data[i][4] = combo.getCombo().getPrice() * combo.getQuantity();
                }

                Object[] columnNames = new Object[5];

                columnNames[0] = "Combo ID";
                columnNames[1] = "Combo Name";
                columnNames[2] = "Combo Price";
                columnNames[3] = "Quantity";
                columnNames[4] = "Total Price";

                TableModel tableModel = new DefaultTableModel(data, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return true;
                    }

                };

                jTableSelectedCombo.setModel(tableModel);
                jTableSelectedCombo.getSelectionModel().addListSelectionListener(new RowListener());
            } else {
                Object[] columnNames = new Object[5];

                columnNames[0] = "Combo ID";
                columnNames[1] = "Combo Name";
                columnNames[2] = "Combo Price";
                columnNames[3] = "Quantity";
                columnNames[4] = "Total Price";
                Object[][] data = new Object[1][5];

                TableModel tableModel = new DefaultTableModel(data, columnNames);
                jTableSelectedCombo.setModel(tableModel);
                jTableSelectedCombo.getSelectionModel().addListSelectionListener(new RowListener());
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unknown error has occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadTableDish() {
        try {

            if (dishList != null && dishList.size() > 0) {
                Object[][] data = new Object[dishList.size()][3];

                for (int i = 0; i < dishList.size(); i++) {
                    DishEntity dish = dishList.get(i);
                    data[i][0] = dish.getId();
                    data[i][1] = dish.getName();
                    data[i][2] = dish.getPrice();
                }

                Object[] columnNames = new Object[3];

                columnNames[0] = "Dish ID";
                columnNames[1] = "Dish Name";
                columnNames[2] = "Dish Price";

                TableModel tableModel = new DefaultTableModel(data, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return true;
                    }

                };

                jTableDish.setModel(tableModel);
                jTableDish.getSelectionModel().addListSelectionListener(new RowListener());
            } else {
                Object[] columnNames = new Object[3];

                columnNames[0] = "Dish ID";
                columnNames[1] = "Dish Name";
                columnNames[2] = "Dish Price";
                Object[][] data = new Object[1][3];

                TableModel tableModel = new DefaultTableModel(data, columnNames);
                jTableDish.setModel(tableModel);
                jTableDish.getSelectionModel().addListSelectionListener(new RowListener());
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unknown error has occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadTableSelectedDish() {
        try {

            if (selectedDish != null && selectedDish.size() > 0) {
                Object[][] data = new Object[selectedDish.size()][5];

                for (int i = 0; i < selectedDish.size(); i++) {
                    DishItemEntity dish = selectedDish.get(i);
                    data[i][0] = dish.getId();
                    data[i][1] = dish.getDish().getName();
                    data[i][2] = dish.getDish().getPrice();
                    data[i][3] = dish.getQuantity();
                    data[i][4] = dish.getDish().getPrice() * dish.getQuantity();
                }

                Object[] columnNames = new Object[5];

                columnNames[0] = "Dish ID";
                columnNames[1] = "Dish Name";
                columnNames[2] = "Dish Price";
                columnNames[3] = "Quantity";
                columnNames[4] = "Total Price";

                TableModel tableModel = new DefaultTableModel(data, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return true;
                    }

                };

                jTableSelectedDish.setModel(tableModel);
                jTableSelectedDish.getSelectionModel().addListSelectionListener(new RowListener());
            } else {
                Object[] columnNames = new Object[5];

                columnNames[0] = "Dish ID";
                columnNames[1] = "Dish Name";
                columnNames[2] = "Dish Price";
                columnNames[3] = "Quantity";
                columnNames[4] = "Total Price";
                Object[][] data = new Object[1][5];

                TableModel tableModel = new DefaultTableModel(data, columnNames);
                jTableSelectedDish.setModel(tableModel);
                jTableSelectedDish.getSelectionModel().addListSelectionListener(new RowListener());
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unknown error has occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private class RowListener implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
        }
    }

    private void initPartnerPoleDisplay() {
        Enumeration commPortList = CommPortIdentifier.getPortIdentifiers();

        while (commPortList.hasMoreElements()) {
            CommPortIdentifier commPort = (CommPortIdentifier) commPortList.nextElement();

            if (commPort.getPortType() == CommPortIdentifier.PORT_SERIAL
                    && commPort.getName().equals(partnerPoleDisplayCOMPort)) {
                try {
                    serialPort = (SerialPort) commPort.open("POS", 5000);
                    partnerPoleDisplayOutputStream = serialPort.getOutputStream();
                } catch (PortInUseException ex) {
                    JOptionPane.showMessageDialog(null, "Unable to initialize Partner Pole Display: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Unable to initialize Partner Pole Display: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }catch (NullPointerException ex){                   
                    System.err.println("Unable to initialize Partner Pole Display");
                }
            }
        }
    }

    private void poleDisplay() {
        byte[] clear = {0x0C};
        byte[] newLine = {0x0A};
        byte[] carriageReturn = {0x0D};
        byte[] message1 = new String("Processing").getBytes();
        byte[] message2 = new String("Please Wait").getBytes();

        try {
            partnerPoleDisplayOutputStream.write(clear);
            partnerPoleDisplayOutputStream.write(message1);
            partnerPoleDisplayOutputStream.write(newLine);
            partnerPoleDisplayOutputStream.write(carriageReturn);
            partnerPoleDisplayOutputStream.write(message2);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Unable to write to Partner Pole Display: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }catch (NullPointerException ex){                   
                    System.err.println("Unable to write to Partner Pole Display");
                }
    }
    
    private void orderDisplay(String name,Double price) {
        byte[] clear = {0x0C};
        byte[] newLine = {0x0A};
        byte[] carriageReturn = {0x0D};
        byte[] message1 = new String(name).getBytes();
        byte[] message2 = new String("S$"+price).getBytes();

        try {
            partnerPoleDisplayOutputStream.write(clear);
            partnerPoleDisplayOutputStream.write(message1);
            partnerPoleDisplayOutputStream.write(newLine);
            partnerPoleDisplayOutputStream.write(carriageReturn);
            partnerPoleDisplayOutputStream.write(message2);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Unable to write to Partner Pole Display: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }catch (NullPointerException ex){                   
                    System.err.println("Unable to write to Partner Pole Display");
                }
    }

    private static java.util.List<sessionbean.km.ComboEntity> getComboByKitchenId(java.lang.Long arg0) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.getComboByKitchenId(arg0);
    }

    private static KitchenOrderEntity createOrder(java.lang.Long kitchenId, java.lang.Long memberId, java.lang.String storestaffId, java.lang.String poSid) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.createOrder(kitchenId, memberId, storestaffId, poSid);
    }

    private static KitchenEntity findKitchenByStoreStaffId(java.lang.String arg0) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.findKitchenByStoreStaffId(arg0);
    }

    private static java.util.List<sessionbean.km.ComboItemEntity> getComboItemByOrderId(java.lang.Long arg0) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.getComboItemByOrderId(arg0);
    }

    private static java.util.List<sessionbean.km.DishEntity> getDishByKitchenId(java.lang.Long arg0) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.getDishByKitchenId(arg0);
    }

    private static java.util.List<sessionbean.km.DishItemEntity> getDishItemByOrderId(java.lang.Long arg0) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.getDishItemByOrderId(arg0);
    }

    private static Long addComboItem(java.lang.Long orderId, java.lang.Long comboId, java.lang.Integer quantity) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.addComboItem(orderId, comboId, quantity);
    }

    private static Long addDishItem(java.lang.Long orderId, java.lang.Long dishId, java.lang.Integer quantity) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.addDishItem(orderId, dishId, quantity);
    }

    private static Long cancelOrder(java.lang.Long orderId) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.cancelOrder(orderId);
    }

    private static Long deleteComboItem(java.lang.Long orderId, java.lang.Long comboItemId) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.deleteComboItem(orderId, comboItemId);
    }

    private static Long deleteDishItem(java.lang.Long orderId, java.lang.Long dishItemId) {
        sessionbean.km.CustomerOrderFulfillmentModuleService service = new sessionbean.km.CustomerOrderFulfillmentModuleService();
        sessionbean.km.CustomerOrderFulfillmentModule port = service.getCustomerOrderFulfillmentModulePort();
        return port.deleteDishItem(orderId, dishItemId);
    }

}
