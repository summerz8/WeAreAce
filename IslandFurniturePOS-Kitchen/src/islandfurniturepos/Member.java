/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package islandfurniturepos;

import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.TerminalFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author hangsun
 */
public class Member extends javax.swing.JFrame {

    private String POSid = null;
    private String staffId = null;
    private Long memberId = null;
    private Boolean flag = Boolean.FALSE;
    private MainMenu mainMenu = null;
    private CardTerminal acr122uCardTerminal = null;
    private String cardId = null;
    private Timer timerCheckCardPresent = null;
    private String partnerPoleDisplayCOMPort = "COM5";
    private OutputStream partnerPoleDisplayOutputStream;
    private SerialPort serialPort;

    /**
     * Creates new form Member
     */
    public Member() {
        initComponents();
    }

    public Member(String POSid, String staffId) {
        this();

        this.POSid = POSid;
        this.staffId = staffId;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelTitle = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jPanelCard = new javax.swing.JPanel();
        jLabelCardPresent = new javax.swing.JLabel();
        jTextFieldCardPresent = new javax.swing.JTextField();
        jLabelCardLoader = new javax.swing.JLabel();
        jTextFieldCardLoader = new javax.swing.JTextField();
        jLabelLogo = new javax.swing.JLabel();
        jPanelInput = new javax.swing.JPanel();
        jLabelMemberId = new javax.swing.JLabel();
        jTextFieldMemberId = new javax.swing.JTextField();
        jButtonCheck = new javax.swing.JButton();
        jButtonGoBack3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanelTitle.setBackground(new java.awt.Color(255, 51, 51));
        jPanelTitle.setPreferredSize(new java.awt.Dimension(647, 119));

        jLabelTitle.setFont(new java.awt.Font("New Peninim MT", 3, 48)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitle.setText("     Island Furniture POS");
        jLabelTitle.setToolTipText("");
        jLabelTitle.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanelTitleLayout = new javax.swing.GroupLayout(jPanelTitle);
        jPanelTitle.setLayout(jPanelTitleLayout);
        jPanelTitleLayout.setHorizontalGroup(
            jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 662, Short.MAX_VALUE)
            .addGroup(jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelTitleLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanelTitleLayout.setVerticalGroup(
            jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 119, Short.MAX_VALUE)
            .addGroup(jPanelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelTitleLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jPanelCard.setBackground(new java.awt.Color(255, 255, 255));

        jLabelCardPresent.setFont(new java.awt.Font("Times", 3, 24)); // NOI18N
        jLabelCardPresent.setText("Card Present");

        jTextFieldCardPresent.setFont(new java.awt.Font("Times", 3, 24)); // NOI18N
        jTextFieldCardPresent.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldCardPresent.setText("No");
        jTextFieldCardPresent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCardPresentActionPerformed(evt);
            }
        });

        jLabelCardLoader.setFont(new java.awt.Font("Times", 3, 24)); // NOI18N
        jLabelCardLoader.setText("Card Loader");

        jTextFieldCardLoader.setFont(new java.awt.Font("Times", 3, 24)); // NOI18N
        jTextFieldCardLoader.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldCardLoader.setText("No");
        jTextFieldCardLoader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCardLoaderActionPerformed(evt);
            }
        });

        jLabelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/singapore-logo0.1.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanelCardLayout = new javax.swing.GroupLayout(jPanelCard);
        jPanelCard.setLayout(jPanelCardLayout);
        jPanelCardLayout.setHorizontalGroup(
            jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCardLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelLogo))
            .addGroup(jPanelCardLayout.createSequentialGroup()
                .addGroup(jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabelCardLoader)
                        .addGroup(jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCardLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabelCardPresent))
                            .addGroup(jPanelCardLayout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jTextFieldCardPresent, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelCardLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jTextFieldCardLoader, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanelCardLayout.setVerticalGroup(
            jPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardLayout.createSequentialGroup()
                .addComponent(jLabelLogo)
                .addGap(52, 52, 52)
                .addComponent(jLabelCardLoader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldCardLoader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabelCardPresent)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldCardPresent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );

        jPanelInput.setBackground(new java.awt.Color(255, 255, 255));

        jLabelMemberId.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jLabelMemberId.setText("Member ID:");

        jTextFieldMemberId.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jTextFieldMemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMemberIdActionPerformed(evt);
            }
        });

        jButtonCheck.setBackground(new java.awt.Color(255, 255, 255));
        jButtonCheck.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonCheck.setText("Check");
        jButtonCheck.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckActionPerformed(evt);
            }
        });

        jButtonGoBack3.setBackground(new java.awt.Color(255, 255, 255));
        jButtonGoBack3.setFont(new java.awt.Font("Times", 3, 18)); // NOI18N
        jButtonGoBack3.setText("Go Back");
        jButtonGoBack3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonGoBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoBack3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelInputLayout = new javax.swing.GroupLayout(jPanelInput);
        jPanelInput.setLayout(jPanelInputLayout);
        jPanelInputLayout.setHorizontalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInputLayout.createSequentialGroup()
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabelMemberId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInputLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jButtonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(71, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonGoBack3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelInputLayout.setVerticalGroup(
            jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInputLayout.createSequentialGroup()
                .addComponent(jButtonGoBack3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMemberId)
                    .addComponent(jTextFieldMemberId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addComponent(jButtonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldMemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMemberIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMemberIdActionPerformed

    private void jButtonCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckActionPerformed
        // TODO add your handling code here:
        try {

            if (jTextFieldMemberId.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please insert member id!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                memberId = Long.parseLong(jTextFieldMemberId.getText());
                flag = checkMember(memberId);
                if (flag) {
//                    poleDisplay("Member Found!");
                    JOptionPane.showMessageDialog(this, "Member found!", "Successful", JOptionPane.INFORMATION_MESSAGE);
                } else {
//                    poleDisplay("Member Not Found!");
                    JOptionPane.showMessageDialog(this, "Member not found!", "Error", JOptionPane.ERROR_MESSAGE);
                }

                goBack();
            }

        } catch (Exception ex) {
        }


    }//GEN-LAST:event_jButtonCheckActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
//     initPartnerPoleDisplay();   
//     poleDisplay("Card Please");  
     try {
            ActionListener actionListenerQuitOnNoReaderAttached = new ActionListener() {
                public void actionPerformed(ActionEvent event) {
                    quitOnNoReaderAttached();
                }
            };

            Timer timerQuitOnNoReaderAttached = new Timer(5000, actionListenerQuitOnNoReaderAttached);
            timerQuitOnNoReaderAttached.setRepeats(false);
            timerQuitOnNoReaderAttached.start();

            TerminalFactory terminalFactory = TerminalFactory.getDefault();

            if (!terminalFactory.terminals().list().isEmpty()) {

                jTextFieldCardLoader.setText("Yes");
                jTextFieldCardLoader.setForeground(Color.GREEN);

                for (CardTerminal cardTerminal : terminalFactory.terminals().list()) {
                    if (cardTerminal.getName().contains("ACS ACR122")) {
                        acr122uCardTerminal = cardTerminal;
                        break;
                    }
                }

                if (acr122uCardTerminal != null) {
                    timerQuitOnNoReaderAttached.stop();
                    ActionListener actionListenerCheckCardPresent = new ActionListener() {
                        public void actionPerformed(ActionEvent event) {
                            checkCardPresent();
                        }
                    };
                    timerCheckCardPresent = new Timer(1000, actionListenerCheckCardPresent);
                    timerCheckCardPresent.setRepeats(true);
                    timerCheckCardPresent.start();
                } else {
                    jTextFieldCardLoader.setText("No");
                    jTextFieldCardLoader.setForeground(Color.RED);
                }
            } else {
                jTextFieldCardLoader.setText("No");
                jTextFieldCardLoader.setForeground(Color.RED);
            }
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_formWindowOpened

    private void jTextFieldCardPresentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCardPresentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCardPresentActionPerformed

    private void jTextFieldCardLoaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCardLoaderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCardLoaderActionPerformed

    private void jButtonGoBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoBack3ActionPerformed
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_jButtonGoBack3ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        System.err.println("Window closed");
        if (serialPort != null) {
            try {
                byte[] clear = {0x0C};
                partnerPoleDisplayOutputStream.write(clear);
                partnerPoleDisplayOutputStream.close();
                serialPort.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Member.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Member.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Member.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Member.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Member().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheck;
    private javax.swing.JButton jButtonGoBack3;
    private javax.swing.JLabel jLabelCardLoader;
    private javax.swing.JLabel jLabelCardPresent;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JLabel jLabelMemberId;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelCard;
    private javax.swing.JPanel jPanelInput;
    private javax.swing.JPanel jPanelTitle;
    private javax.swing.JTextField jTextFieldCardLoader;
    private javax.swing.JTextField jTextFieldCardPresent;
    private javax.swing.JTextField jTextFieldMemberId;
    // End of variables declaration//GEN-END:variables

    private static Boolean checkMember(java.lang.Long memberId) {
        sessionbean.ocrm.MemberRegistrationModuleService service = new sessionbean.ocrm.MemberRegistrationModuleService();
        sessionbean.ocrm.MemberRegistrationModule port = service.getMemberRegistrationModulePort();
        return port.checkMember(memberId);
    }
    
    private void initPartnerPoleDisplay() {
        Enumeration commPortList = CommPortIdentifier.getPortIdentifiers();

        while (commPortList.hasMoreElements()) {
            CommPortIdentifier commPort = (CommPortIdentifier) commPortList.nextElement();

            if (commPort.getPortType() == CommPortIdentifier.PORT_SERIAL
                    && commPort.getName().equals(partnerPoleDisplayCOMPort)) {
                try {
                    serialPort = (SerialPort) commPort.open("POS", 5000);
                    partnerPoleDisplayOutputStream = serialPort.getOutputStream();
                } catch (PortInUseException ex) {
                    JOptionPane.showMessageDialog(null, "Unable to initialize Partner Pole Display: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Unable to initialize Partner Pole Display: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }catch (NullPointerException ex){                   
                    System.err.println("Unable to initialize Partner Pole Display");
                }
            }
        }
    }
    
    private void poleDisplay(String result) {
        byte[] clear = {0x0C};
        byte[] newLine = {0x0A};
        byte[] carriageReturn = {0x0D};
        byte[] message1 = new String("Member Check").getBytes();
        byte[] message2 = new String(result).getBytes();

        try {
            partnerPoleDisplayOutputStream.write(clear);
            partnerPoleDisplayOutputStream.write(message1);
            partnerPoleDisplayOutputStream.write(newLine);
            partnerPoleDisplayOutputStream.write(carriageReturn);
            partnerPoleDisplayOutputStream.write(message2);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Unable to write to Partner Pole Display: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }catch (NullPointerException ex){                   
                    System.err.println("Unable to write to Partner Pole Display");
                }
    }
    
    private void closePort() {
        System.err.println("Window closed");
        if (serialPort != null) {
            try {
                byte[] clear = {0x0C};
                partnerPoleDisplayOutputStream.write(clear);
                partnerPoleDisplayOutputStream.close();
                serialPort.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }

    private void quitOnNoReaderAttached() {
//        JOptionPane.showMessageDialog(this, "No card reader is attached", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
//        this.setVisible(false);
//        this.dispose();
    }

    private void checkCardPresent() {
        try {
            if (acr122uCardTerminal.isCardPresent()) {
                jTextFieldCardPresent.setText("Yes");
                jTextFieldCardPresent.setForeground(Color.GREEN);

                cardId = getCardId();
                memberId = getMemberIdByCardId(cardId);
                if (memberId != null) {
                    jTextFieldMemberId.setText(String.valueOf(memberId));
                    flag = checkMember(memberId);
                }

                if (flag) {
//                    poleDisplay("Member Found!");
                    JOptionPane.showMessageDialog(this, "Member found!", "Successful", JOptionPane.INFORMATION_MESSAGE);

                } else {
//                    poleDisplay("Member Not Found!");
                    JOptionPane.showMessageDialog(this, "Member not found!", "Error", JOptionPane.ERROR_MESSAGE);
                }

                goBack();

            } else {
                jTextFieldCardPresent.setText("No");
                jTextFieldCardPresent.setForeground(Color.RED);
            }
        } catch (Exception ex) {
        }
    }

    private String getCardId() {
        byte[] byteArrayReadUID = {(byte) 0xFF, (byte) 0xCA, (byte) 0x00, (byte) 0x00, (byte) 0x00};

        return connectToCard(byteArrayReadUID);
    }

    private String connectToCard(byte[] byteArrayReadUID) {
        try {
            acr122uCardTerminal.waitForCardPresent(0);
            Card card = acr122uCardTerminal.connect("T=1");
            CardChannel cardChannel = card.getBasicChannel();

            return send(byteArrayReadUID, cardChannel);
        } catch (Exception ex) {
            return "";
        }
    }

    public String send(byte[] command, CardChannel cardChannel) {
        String response = "";

        byte[] byteArrayResponse = new byte[258];
        ByteBuffer bufferedCommand = ByteBuffer.wrap(command);
        ByteBuffer bufferedResponse = ByteBuffer.wrap(byteArrayResponse);

        // output = The length of the received response APDU
        int output = 0;

        try {
            output = cardChannel.transmit(bufferedCommand, bufferedResponse);
        } catch (CardException ex) {
            ex.printStackTrace();
        }

        for (int i = 0; i < output; i++) {
            response += String.format("%02X", byteArrayResponse[i]);
        }

        return response;
    }

    private void goBack() {
        
        if(timerCheckCardPresent != null)
                timerCheckCardPresent.stop();
//        closePort();
        this.setVisible(false);
        this.dispose();
        
        if (flag) {
            mainMenu = new MainMenu(POSid, staffId, memberId);
        } else {
            mainMenu = new MainMenu(POSid, staffId);
        }

        mainMenu.setLocationRelativeTo(null);
        mainMenu.setVisible(true);
        mainMenu.setExtendedState(JFrame.NORMAL);

    }

    private static Long getMemberIdByCardId(java.lang.String arg0) {
        sessionbean.ocrm.MemberRegistrationModuleService service = new sessionbean.ocrm.MemberRegistrationModuleService();
        sessionbean.ocrm.MemberRegistrationModule port = service.getMemberRegistrationModulePort();
        return port.getMemberIdByCardId(arg0);
    }

}
